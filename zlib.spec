# 
# Do NOT Edit the Auto-generated Part!
# Generated by: spectacle version 0.23
# 
# >> macros
%define binutils_ver %(rpm -q --queryformat='%%{version}' binutils | awk -F. '{print $1$2}')
# << macros
%define keepstatic 1

Name:       zlib
Summary:    The zlib compression and decompression library
Version:    1.2.7
Release:    1
Group:      System/Libraries
License:    zlib and Boost
URL:        http://www.gzip.org/zlib/
Source0:    http://www.zlib.net/zlib-%{version}.tar.bz2
Source100:  zlib.yaml
Patch0:     zlib-1.2.7-adler32_vec_kaffeemonster.patch
Requires(post): /sbin/ldconfig
Requires(postun): /sbin/ldconfig
BuildRequires:  automake
BuildRequires:  autoconf
BuildRequires:  libtool


%description
Zlib is a general-purpose, patent-free, lossless data compression
library which is used by many different programs.



%package static
Summary:    Static libraries for Zlib development
Group:      Development/Libraries
Requires:   %{name} = %{version}-%{release}

%description static
The zlib-static package includes static libraries needed
to develop programs that use the zlib compression and
decompression library.


%package -n minizip
Summary:    Minizip manipulates files from a .zip archive
Group:      System/Libraries
Requires:   %{name} = %{version}-%{release}
Requires(post): /sbin/ldconfig
Requires(postun): /sbin/ldconfig

%description -n minizip
Minizip manipulates files from a .zip archive.

%package -n minizip-devel
Summary:    Development files for the minizip library
Group:      Development/Libraries
Requires:   %{name} = %{version}-%{release}

%description -n minizip-devel
This package contains the libraries and header files needed for
developing applications which use minizip.


%package devel
Summary:    Header files and libraries for Zlib development
Group:      Development/Libraries
Requires:   %{name} = %{version}-%{release}

%description devel
The zlib-devel package contains the header files and libraries needed
to develop programs that use the zlib compression and decompression
library.



%prep
%setup -q -n %{name}-%{version}

# zlib-1.2.7-adler32_vec_kaffeemonster.patch
%patch0 -p1
# >> setup
mkdir contrib/minizip/m4
# << setup

%build
# >> build pre
CFLAGS="$RPM_OPT_FLAGS" ./configure --libdir=%{_libdir} --includedir=%{_includedir} --prefix=%{_prefix}

#ensure 64 offset versions are compiled (do not override CFLAGS blindly)
export CFLAGS="`egrep ^CFLAGS Makefile | sed -e 's/CFLAGS=//'`"
export SFLAGS="`egrep ^SFLAGS Makefile | sed -e 's/SFLAGS=//'`"
# << build pre



# >> build post
#
# first,build with -fprofile-generate to create the profile data
#
make %{?_smp_mflags} CFLAGS="$CFLAGS -pg -fprofile-generate" SFLAGS="$SFLAGS -pg -fprofile-generate"

#
# Then run some basic operations using the minigzip test program
# to collect the profile guided stats
# (in this case, we compress and decompress the content of /usr/bin)
#
cp Makefile Makefile.old
make test -f Makefile.old LDFLAGS="libz.a -lgcov"
cat /usr/bin/* | ./minigzip | ./minigzip -d &> /dev/null

#
# Now that we have the stats, we need to build again, using -fprofile-use
# Due to the libtool funnies, we need to hand copy the profile data to .libs
#
mkdir libs-tmp
cp *gcda libs-tmp
make clean
mv libs-tmp/*gcda .
rm -rf libs-tmp

#
# Final build, with -fprofile-use
#

%ifarch %{ix86}
make %{?_smp_mflags} CFLAGS="$CFLAGS -DHAVE_BINUTILS=%{binutils_ver}"  SFLAGS="$SFLAGS " adler32.o adler32.lo
%endif
make %{?_smp_mflags} CFLAGS="$CFLAGS -fprofile-use -DHAVE_BINUTILS=%{binutils_ver}"  SFLAGS="$SFLAGS -fprofile-use"
cd contrib/minizip
%reconfigure --disable-static
export CFLAGS="$RPM_OPT_FLAGS -DHAVE_BINUTILS=%{binutils_ver}"
make %{?_smp_mflags}
# << build post
%install
rm -rf %{buildroot}
# >> install pre
%make_install
# << install pre

# >> install post
mkdir $RPM_BUILD_ROOT/%{_lib}
mv $RPM_BUILD_ROOT%{_libdir}/libz.so.* $RPM_BUILD_ROOT/%{_lib}/

reldir=$(echo %{_libdir} | sed 's,/$,,;s,/[^/]\+,../,g')%{_lib}
oldlink=$(readlink $RPM_BUILD_ROOT%{_libdir}/libz.so)
ln -sf $reldir/$(basename $oldlink) $RPM_BUILD_ROOT%{_libdir}/libz.so

cd contrib/minizip
make install DESTDIR=$RPM_BUILD_ROOT

rm -f $RPM_BUILD_ROOT%{_libdir}/*.la
# << install post
%check
# >> check
make test
# << check



%post -p /sbin/ldconfig

%postun -p /sbin/ldconfig






%post -n minizip -p /sbin/ldconfig

%postun -n minizip -p /sbin/ldconfig







%files
%defattr(-,root,root,-)
# >> files
/%{_lib}/libz.so.*
# << files


%files static
%defattr(-,root,root,-)
# >> files static
%doc README
%{_libdir}/libz.a
# << files static

%files -n minizip
%defattr(-,root,root,-)
# >> files minizip
%doc contrib/minizip/MiniZip64_info.txt contrib/minizip/MiniZip64_Changes.txt
%{_libdir}/libminizip.so.*
# << files minizip

%files -n minizip-devel
%defattr(-,root,root,-)
# >> files minizip-devel
%dir %{_includedir}/minizip
%{_includedir}/minizip/*.h
%{_libdir}/libminizip.so
%{_libdir}/pkgconfig/minizip.pc
# << files minizip-devel

%files devel
%defattr(-,root,root,-)
# >> files devel
%doc README doc/algorithm.txt test/example.c ChangeLog FAQ
%{_libdir}/libz.so
%{_includedir}/zconf.h
%{_includedir}/zlib.h
%{_mandir}/man3/zlib.3*
%{_libdir}/pkgconfig/zlib.pc
# << files devel

